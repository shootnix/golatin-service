package models

import (
	"bytes"
	"errors"
)

type Transliter struct {
	Table string
	Map   map[string]string
}

var defaultMap = map[string]string{
	"А": "а", "а": "a", "Ә": "Á", "ә": "á", "Б": "B", "б": "b", "В": "V", "в": "v", "Г": "G", "г": "g",
	"Ғ": "Ǵ", "ғ": "ǵ", "Д": "D", "д": "d", "Е": "E", "е": "e", "Ж": "J",
	"ж": "j", "З": "Z", "з": "z", "И": "I", "и": "ı", "Й": "I", "й": "ı", "К": "K", "к": "k",
	"Қ": "Q", "қ": "q", "Л": "L", "л": "l", "М": "M", "м": "m", "Н": "N", "н": "n", "Ң": "Ń",
	"ң": "ń", "О": "O", "о": "o", "Ө": "Ó", "ө": "ó", "П": "P", "п": "p", "Р": "R", "р": "r",
	"С": "S", "с": "s", "Т": "T", "т": "t", "У": "Ý", "у": "ý", "Ұ": "U", "ұ": "u", "Ү": "Ú",
	"ү": "ú", "Ф": "F", "ф": "f", "Х": "X", "х": "x", "Һ": "H", "һ": "h",
	"Ч": "Ch", "ч": "ch", "Ш": "Sh", "ш": "sh", "Ы": "Y", "ы": "y", "І": "I", "і": "i",
}

var qazaqparatMap = map[string]string{
	"А": "а", "а": "a", "Ә": "Ä", "ә": "ä", "Б": "B", "б": "b", "В": "V", "в": "v", "Г": "G", "г": "g",
	"Ғ": "Ğ", "ғ": "ğ", "Д": "D", "д": "d", "Е": "E", "е": "e", "Ё": "Yo", "ё": "yo", "Ж": "J",
	"ж": "j", "З": "Z", "з": "z", "И": "Ï", "и": "ï", "Й": "Y", "й": "Y", "К": "K", "к": "k",
	"Қ": "Q", "қ": "q", "Л": "L", "л": "l", "М": "M", "м": "m", "Н": "N", "н": "n", "Ң": "Ñ",
	"ң": "ñ", "О": "O", "о": "o", "Ө": "Ö", "ө": "ö", "П": "P", "п": "p", "Р": "R", "р": "r",
	"С": "S", "с": "s", "Т": "T", "т": "t", "У": "W", "у": "w", "Ұ": "U", "ұ": "u", "Ү": "Ü",
	"ү": "ü", "Ф": "F", "ф": "f", "Х": "H", "х": "h", "Һ": "H", "һ": "h", "Ц": "c", "ц": "c",
	"Ч": "Ç", "ч": "ç", "Ш": "Ş", "ш": "ş", "Щ": "Şş", "щ": "şş", "Ъ": "ʺ", "ъ": "ʺ", "Ы": "I",
	"ы": "ı", "І": "İ", "і": "i", "Ь": "ʹ", "ь": "ʹ", "Э": "É", "э": "é", "Ю": "Yw", "ю": "yw",
	"Я": "Ya", "я": "ya",
}

var tleshovMap = map[string]string{
	"А": "а", "а": "a", "Ә": "Ae", "ә": "ae", "Б": "B", "б": "b", "В": "V", "в": "v", "Г": "G", "г": "g",
	"Ғ": "G'", "ғ": "g'", "Д": "D", "д": "d", "Е": "E", "е": "e", "Ё": "Yo", "ё": "yo", "Ж": "Zh",
	"ж": "zh", "З": "Z", "з": "z", "И": "I'", "и": "i'", "Й": "I'", "й": "i'", "К": "K", "к": "k",
	"Қ": "Q", "қ": "q", "Л": "L", "л": "l", "М": "M", "м": "m", "Н": "N", "н": "n", "Ң": "N'",
	"ң": "n'", "О": "O", "о": "o", "Ө": "O'", "ө": "o'", "П": "P", "п": "p", "Р": "R", "р": "r",
	"С": "S", "с": "s", "Т": "T", "т": "t", "У": "Y'", "у": "y'", "Ұ": "U", "ұ": "u", "Ү": "U'",
	"ү": "u'", "Ф": "F", "ф": "f", "Х": "X", "х": "x", "Һ": "H", "һ": "h", "Ц": "c", "ц": "c",
	"Ч": "C'", "ч": "c'", "Ш": "S'", "ш": "s'", "Ы": "Y", "ы": "y", "І": "I", "і": "i", "Ю": "Yw",
	"ю": "yw", "Я": "Ya", "я": "ya",
}

var qqqMap = map[string]string{
	"А": "а", "а": "a", "Ә": "A'", "ә": "a'", "Б": "B", "б": "b", "В": "V", "в": "v", "Г": "G", "г": "g",
	"Ғ": "Gh", "ғ": "gh", "Д": "D", "д": "d", "Е": "E", "е": "e", "Ё": "Yo", "ё": "yo", "Ж": "Zh",
	"ж": "zh", "З": "Z", "з": "z", "И": "I", "и": "i", "Й": "J", "й": "j", "К": "K", "к": "k",
	"Қ": "Q", "қ": "q", "Л": "L", "л": "l", "М": "M", "м": "m", "Н": "N", "н": "n", "Ң": "Ng",
	"ң": "ng", "О": "O", "о": "o", "Ө": "Oe", "ө": "oe", "П": "P", "п": "p", "Р": "R", "р": "r",
	"С": "S", "с": "s", "Т": "T", "т": "t", "У": "W", "у": "w", "Ұ": "U", "ұ": "u", "Ү": "Ue",
	"ү": "ue", "Ф": "F", "ф": "f", "Х": "H", "х": "h", "Һ": "H", "һ": "h", "Ц": "c", "ц": "c",
	"Ч": "Ch", "ч": "ch", "Ш": "Sh", "ш": "sh", "Щ": "Sh", "щ": "sh", "Ъ": "", "ъ": "", "Ы": "Y",
	"ы": "y", "І": "I", "і": "i", "Ь": "", "ь": "", "Э": "E", "э": "e", "Ю": "Yu", "ю": "yu",
	"Я": "Ya", "я": "ya",
}

func NewTransliter(table string) (*Transliter, error) {
	t := &Transliter{
		Table: table,
	}

	switch table {
	case "default":
		t.Map = defaultMap
	case "qazaqparat":
		t.Map = qazaqparatMap
	case "tleshov":
		t.Map = tleshovMap
	case "qqq":
		t.Map = qqqMap
	default:
		return nil, errors.New("invalid table: " + table)
	}

	return t, nil
}

func (t *Transliter) GoLatin(s string) (string, error) {
	input := bytes.NewBufferString(s)
	output := bytes.NewBuffer(nil)

	var v string
	var ok bool

	for {
		r, _, err := input.ReadRune()
		k := string(r)
		if err != nil {
			break
		}

		v, ok = t.Map[k]
		if ok {
			output.WriteString(v)
		} else {
			output.WriteString(k)
		}
	}

	return output.String(), nil
}
